@page "/"
@inject IMarvelCharacterService MarvelCharacterService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IConfiguration Configuration
@inject IJSRuntime IJSRuntime

<button class="btn btn-primary" @onclick=@Authenticate>Generate API Token</button>
<button class="btn btn-light" @onclick=@InvokeJS>Invoke React Componenet Rendering</button>
<Modal @ref="TokenModalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>API Token</ModalTitle>
            <CloseButton Clicked="@HideTokenModal" />
        </ModalHeader>
        <ModalBody>
            <Field Style="overflow-wrap: break-word">
                @if (!_hasTokenGenerationException) {
                    @_token
                } else {
                    if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development") {
                        @_exception
                    } else {
                        @("Somethig Went Wrong :(")
                    }
                }
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideTokenModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<div id="React"></div>
@code{

    private string _token;
    private string _exception;
    private bool _hasTokenGenerationException;
    private Modal TokenModalRef;
    private async Task Authenticate() {
        try {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var authenticatedUser = authState.User;
            if (authenticatedUser.Identity.IsAuthenticated) {
                var user = await UserManager.GetUserAsync(authenticatedUser);
                var tokenHandler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                var key = Encoding.ASCII.GetBytes(Configuration.GetSection("JWToken").GetSection("Key").Value);
                var tokenDescriptor = new System.IdentityModel.Tokens.Jwt.JwtSecurityToken(
                    claims: new[]
                    {
                        //new Claim(System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.UniqueName,user.UserName ),
                        //Raymond: I beleive this was desgin for SOAP for XML, and not for Jwt(Json web Token)
                        //But we need this for the Role
                        new Claim(ClaimTypes.Name,user.UserName)
                                                },
                    expires: DateTime.UtcNow.AddMinutes(10),
                    signingCredentials: new Microsoft.IdentityModel.Tokens.SigningCredentials(
                        new Microsoft.IdentityModel.Tokens.SymmetricSecurityKey(key),
                        Microsoft.IdentityModel.Tokens.SecurityAlgorithms.HmacSha256Signature)
                );
                _hasTokenGenerationException = false;
                _token = tokenHandler.WriteToken(tokenDescriptor);

            }
        }
        catch (Exception e) {
            _hasTokenGenerationException = true;
            _exception = e.ToString();
        }
        ShowTokenModal();
    }

    protected override async Task OnInitializedAsync() {
        //await MarvelCharacterService.GetMoreMarvelCharacterAsync();
    }

    private void ShowTokenModal() {
        TokenModalRef.Show();
    }

    private void HideTokenModal() {
        TokenModalRef.Hide();
    }

    private async Task InvokeJS() {
        await IJSRuntime.InvokeVoidAsync("RenderReact");
    }
}