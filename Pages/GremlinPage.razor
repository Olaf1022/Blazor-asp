@page "/gremlinPage"
@inject ICosmosDbGremlinService CosmosDbGremlinService

<link rel="stylesheet" href="css/gremlin.css" type="text/css" />
<h3>Azure CosmosDB Gremlin API</h3>
@{
    int count = 0;
    <Accordion>
        @foreach (var queries in _gremlinQueries)
        {
            count++;
            int i = count;
            <Collapse Visible=@(_collapseVisible[$"collapse{i}Visible"])>
                <CollapseHeader>
                    <Heading Size="HeadingSize.Is5">
                        <Button Color="Color.Primary" Clicked="@(()=>_collapseVisible[$"collapse{i}Visible"] = !_collapseVisible[$"collapse{i}Visible"])">@queries.Key</Button>
                    </Heading>
                </CollapseHeader>
                <CollapseBody>
                    @queries.Value
                    <Button Color="Color.Danger" Clicked="()=>Submit(queries.Value)">Submit</Button>
                </CollapseBody>
            </Collapse>
        }
    </Accordion>
}
<div>@_exception</div>

@code {
    private string _repsone;
    private string _exception;
    private Dictionary<string, bool> _collapseVisible = new Dictionary<string,bool>();
    private Dictionary<string, string> _gremlinQueries = new Dictionary<string, string>
    {
        { "Cleanup",        "g.V().drop()" },
        { "AddVertex 1",    "g.addV('person').property('id', 'thomas').property('firstName', 'Thomas').property('age', 44).property('pk', 'pk')" },
        { "AddVertex 2",    "g.addV('person').property('id', 'mary').property('firstName', 'Mary').property('lastName', 'Andersen').property('age', 39).property('pk', 'pk')" },
        { "AddVertex 3",    "g.addV('person').property('id', 'ben').property('firstName', 'Ben').property('lastName', 'Miller').property('pk', 'pk')" },
        { "AddVertex 4",    "g.addV('person').property('id', 'robin').property('firstName', 'Robin').property('lastName', 'Wakefield').property('pk', 'pk')" },
        { "AddEdge 1",      "g.V('thomas').addE('knows').to(g.V('mary'))" },
        { "AddEdge 2",      "g.V('thomas').addE('knows').to(g.V('ben'))" },
        { "AddEdge 3",      "g.V('ben').addE('knows').to(g.V('robin'))" },
        { "UpdateVertex",   "g.V('thomas').property('age', 44)" },
        { "CountVertices",  "g.V().count()" },
        { "Filter Range",   "g.V().hasLabel('person').has('age', gt(40))" },
        { "Project",        "g.V().hasLabel('person').values('firstName')" },
        { "Sort",           "g.V().hasLabel('person').order().by('firstName', decr)" },
        { "Traverse",       "g.V('thomas').out('knows').hasLabel('person')" },
        { "Traverse 2x",    "g.V('thomas').out('knows').hasLabel('person').out('knows').hasLabel('person')" },
        { "Loop",           "g.V('thomas').repeat(out()).until(has('id', 'robin')).path()" },
        { "DropEdge",       "g.V('thomas').outE('knows').where(inV().has('id', 'mary')).drop()" },
        { "CountEdges",     "g.E().count()" },
        { "DropVertex",     "g.V('thomas').drop()" }
    };

    protected override void OnInitialized()
    {
        int i = 0;
        foreach (var queries in _gremlinQueries)
        {
            i++;
            if(i == 1)
            {
                _collapseVisible.Add($"collapse{i}Visible", true);
            }
            else
            {
                _collapseVisible.Add($"collapse{i}Visible", false);
            }
        }
    }

    private async Task Submit(string query)
    {
        try
        {
            await CosmosDbGremlinService.SubmitQuery(query);
        }
        catch (Exception e)
        {
            _exception = e.ToString();
        }

    }
}